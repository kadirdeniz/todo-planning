// Code generated by MockGen. DO NOT EDIT.
// Source: internal/task/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "todo-planner/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetAllTasks mocks base method.
func (m *MockIRepository) GetAllTasks() ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks")
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockIRepositoryMockRecorder) GetAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockIRepository)(nil).GetAllTasks))
}

// SaveTasks mocks base method.
func (m *MockIRepository) SaveTasks(tasks []model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTasks", tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTasks indicates an expected call of SaveTasks.
func (mr *MockIRepositoryMockRecorder) SaveTasks(tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTasks", reflect.TypeOf((*MockIRepository)(nil).SaveTasks), tasks)
}
